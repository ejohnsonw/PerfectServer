
func create (params:Dictionary){

var request = NSMutableURLRequest(URL: NSURL(string: baseUrl+"${entity.getVariableName()}"))
var session = NSURLSession.sharedSession()
request.HTTPMethod = "POST"


var err: NSError?
request.HTTPBody = NSJSONSerialization.dataWithJSONObject(params, options: nil, error: &err)
request.addValue("application/json", forHTTPHeaderField: "Content-Type")
request.addValue("application/json", forHTTPHeaderField: "Accept")

var task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -> Void in
  println("Response: \(response)")
  var strData = NSString(data: data, encoding: NSUTF8StringEncoding)
  println("Body: \(strData)")
  var err: NSError?
  var json = NSJSONSerialization.JSONObjectWithData(data, options: .MutableLeaves, error: &err) as NSDictionary

  if(err) {
    println(err!.localizedDescription)
  }
  else {
    var success = json["success"] as? Int
  println("Succes: \(success)")
  }
})

task.resume()

}


func update (params:Dictionary){

var request = NSMutableURLRequest(URL: NSURL(string: baseUrl+"${entity.getVariableName()}/"+params['id']))
var session = NSURLSession.sharedSession()
request.HTTPMethod = "POST"


var err: NSError?
request.HTTPBody = NSJSONSerialization.dataWithJSONObject(params, options: nil, error: &err)
request.addValue("application/json", forHTTPHeaderField: "Content-Type")
request.addValue("application/json", forHTTPHeaderField: "Accept")

var task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -> Void in
  println("Response: \(response)")
  var strData = NSString(data: data, encoding: NSUTF8StringEncoding)
  println("Body: \(strData)")
  var err: NSError?
  var json = NSJSONSerialization.JSONObjectWithData(data, options: .MutableLeaves, error: &err) as NSDictionary

  if(err) {
    println(err!.localizedDescription)
  }
  else {
    var success = json["success"] as? Int
  println("Succes: \(success)")
  }
})

task.resume()

}



func delete(params:Dictionary){

var request = NSMutableURLRequest(URL: NSURL(string: baseUrl+"${entity.getVariableName()}/"+params['id']))
var session = NSURLSession.sharedSession()
request.HTTPMethod = "DELETE"


var err: NSError?
request.HTTPBody = NSJSONSerialization.dataWithJSONObject(params, options: nil, error: &err)
request.addValue("application/json", forHTTPHeaderField: "Content-Type")
request.addValue("application/json", forHTTPHeaderField: "Accept")

var task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -> Void in
  println("Response: \(response)")
  var strData = NSString(data: data, encoding: NSUTF8StringEncoding)
  println("Body: \(strData)")
  var err: NSError?
  var json = NSJSONSerialization.JSONObjectWithData(data, options: .MutableLeaves, error: &err) as NSDictionary

  if(err) {
    println(err!.localizedDescription)
  }
  else {
    var success = json["success"] as? Int
  println("Succes: \(success)")
  }
})

task.resume()

}


func retrieve(params:Dictionary){

var request = NSMutableURLRequest(URL: NSURL(string: baseUrl+"${entity.getVariableName()}/"+params['id']))
var session = NSURLSession.sharedSession()
request.HTTPMethod = "GET"


var err: NSError?
request.HTTPBody = NSJSONSerialization.dataWithJSONObject(params, options: nil, error: &err)
request.addValue("application/json", forHTTPHeaderField: "Content-Type")
request.addValue("application/json", forHTTPHeaderField: "Accept")

var task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -> Void in
  println("Response: \(response)")
  var strData = NSString(data: data, encoding: NSUTF8StringEncoding)
  println("Body: \(strData)")
  var err: NSError?
  var json = NSJSONSerialization.JSONObjectWithData(data, options: .MutableLeaves, error: &err) as NSDictionary

  if(err) {
    println(err!.localizedDescription)
  }
  else {
    var success = json["success"] as? Int
  println("Succes: \(success)")
  }
})

task.resume()

}


func list(){
var request = NSMutableURLRequest(URL: NSURL(string: baseUrl+"${entity.getVariableName()}/"))
var session = NSURLSession.sharedSession()
request.HTTPMethod = "GET"


var err: NSError?
request.HTTPBody = NSJSONSerialization.dataWithJSONObject(params, options: nil, error: &err)
request.addValue("application/json", forHTTPHeaderField: "Content-Type")
request.addValue("application/json", forHTTPHeaderField: "Accept")

var task = session.dataTaskWithRequest(request, completionHandler: {data, response, error -> Void in
  println("Response: \(response)")
  var strData = NSString(data: data, encoding: NSUTF8StringEncoding)
  println("Body: \(strData)")
  var err: NSError?
  var json = NSJSONSerialization.JSONObjectWithData(data, options: .MutableLeaves, error: &err) as NSDictionary

  if(err) {
    println(err!.localizedDescription)
  }
  else {
    var success = json["success"] as? Int
  println("Succes: \(success)")
  }
})

task.resume()
}


